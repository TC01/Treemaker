#!/usr/bin/env python

# TODO: decouple this code into the libraries.
# Or at least functions.

import math
import os
import shutil
import sys

from Treemaker.Treemaker import config
from Treemaker.Treemaker import parser

pluginDir = "src/Treemaker/Treemaker/python/plugins"
template = "src/Treemaker/Treemaker/data/condor_template"
templateScript = "src/Treemaker/Treemaker/data/condor_script.sh"
outputScript = "src/Treemaker/Treemaker/data/hadd_output.py"
argsFilename = "job_params"
scriptFilename = "condor_script.sh"

def main():
	treeParser = parser.getCondorParser()
	(opts, args) = treeParser.parse_args()
	
	# For the input, create a condor job file.
	for arg in args:
		treemakerConfig = config.TreemakerConfig(arg)
		
		if opts.splitInto > 0 and opts.splitBy > 0:
			print "Error: cannot set both splitInto and splitBy, please specify one or the other."
			sys.exit(1)
		
		# Write the arguments string, containing any CLI overrides
		arguments = "' "
		if opts.force:
			arguments += "-f "
		if opts.linear:
			arguments += "-l "
		if opts.splitInto > 0:
			treemakerConfig.splitInto = opts.splitInto
			arguments += "--split-into " + str(opts.splitInto) + " "
		if opts.splitBy > 0:
			treemakerConfig.splitBy = opts.splitBy
			arguments += "--split-by " + str(opts.splitBy) + " "
		arguments += arg.split("/")[-1] + "'"
		jobName = arg.split("/")[-1].partition(".")[0]
		outputName = jobName		

		# Get the location of the framework we're running from.
		try:
			cmssw = os.environ['CMSSW_BASE']
			cmsswVersion = cmssw.split("/")[-1]
		except KeyError:
			print "Error: CMSSW_BASE is not defined, you must run cmsenv."
			sys.exit(1)
		
		templateFile = os.path.join(cmssw, template)
		with open(templateFile, 'rb') as condorFile:
			text = condorFile.read()

		# Job-splitting support.
		numJobs = 1
		if treemakerConfig.splitInto > 0:
			# dammit, this code is being reused, this should be made better.
			ntuples = []
			for path, dirs, files in os.walk(directory):
#				if path == directory:
				for ntuple in files:
					if '.root' in ntuple:
						ntuples.append(os.path.join(path, ntuple))
			numJobs = int(math.ceil(len(ntuples) / float(treemakerConfig.splitInto)))
		if treemakerConfig.splitBy > 0:
			numJobs = treemakerConfig.splitBy
		for i in range(numJobs):
			text += "Arguments = output_$(Cluster)_$(Process)"
			if numJobs > 1:
				text += " --split-index " + str(i)
			text += "\n"
			text += "Queue 1\n\n"

		jobPath = os.path.join(os.getcwd(), jobName)
		if os.path.exists(jobPath):
			if opts.force:
				shutil.rmtree(jobPath)
			else:
				print "Error: Job folder " + jobPath + " already exists, please remove it."
				sys.exit(1)
		os.mkdir(jobPath)
		os.mkdir(os.path.join(jobPath, "logs"))

		text = text.replace("$EXECUTABLE", os.path.join(jobPath, scriptFilename))
		text = text.replace("$INPUT_FILES", os.path.join(jobPath, argsFilename) + ", " + os.path.abspath(arg) + ", $PLUGIN_PATH")
		text = text.replace("$PLUGIN_PATH", os.path.join(cmssw, pluginDir))
		
		# Write the files to the job directory.
		with open(os.path.join(jobPath, outputName), 'wb') as jobFile:
			jobFile.write(text)
		with open(os.path.join(jobPath, argsFilename), 'wb') as argsFile:
			argsFile.write("#!/bin/tcsh\n")
			argsFile.write("setenv ARGUMENTS " + arguments + "\n")
			argsFile.write("setenv CMSSW_RELEASE " + cmsswVersion + "\n")
		shutil.copy(os.path.join(cmssw, templateScript), os.path.join(jobPath, scriptFilename))
		shutil.copy(os.path.join(cmssw, outputScript), os.path.join(jobPath))

		# Run the job if we're supposed to do that.
		if opts.run:
			os.system("cd " + jobPath + " && condor_submit " + os.path.join(jobPath, outputName))

if __name__ == '__main__':
	main()
